/**
 * DIAGN√ìSTICO FINAL: PROBLEMA "EN USO / TOTAL" 
 * 
 * Este script verifica el estado real de la base de datos y los c√°lculos
 * despu√©s de reiniciar la base de datos.
 * 
 * EJECUTAR EN CONSOLA DEL NAVEGADOR DESPU√âS DE CREAR UNA ACTIVIDAD
 */

console.log('üîç === DIAGN√ìSTICO FINAL: EN USO / TOTAL ===');

// Funci√≥n principal de diagn√≥stico
async function diagnosticarProblemaEnUsoTotal() {
  try {
    console.log('1Ô∏è‚É£ Verificando servicios Firebase...');
    
    if (!window.firebase || !window.firebase.firestore) {
      console.error('‚ùå Firebase no est√° disponible');
      return;
    }
    
    const db = window.firebase.firestore();
    console.log('‚úÖ Firebase conectado');
    
    console.log('2Ô∏è‚É£ Verificando colecciones b√°sicas...');
    
    // Verificar materiales
    const materialesSnapshot = await db.collection('materiales').get();
    console.log(`üì¶ Materiales en BD: ${materialesSnapshot.size}`);
    
    if (materialesSnapshot.size === 0) {
      console.log('‚ö†Ô∏è NO HAY MATERIALES - Este es el problema!');
      console.log('üí° Soluci√≥n: Crear materiales primero');
      return;
    }
    
    // Verificar pr√©stamos
    const prestamosSnapshot = await db.collection('prestamos').get();
    console.log(`üîÑ Pr√©stamos totales en BD: ${prestamosSnapshot.size}`);
    
    if (prestamosSnapshot.size === 0) {
      console.log('‚ö†Ô∏è NO HAY PR√âSTAMOS - Este es el comportamiento esperado despu√©s de reiniciar BD');
      console.log('‚úÖ La columna "En uso / Total" mostrar√° 0/X correctamente');
    }
    
    // Verificar pr√©stamos por estado
    const estadosCount = {};
    prestamosSnapshot.forEach(doc => {
      const data = doc.data();
      estadosCount[data.estado] = (estadosCount[data.estado] || 0) + 1;
    });
    
    console.log('üìä Pr√©stamos por estado:', estadosCount);
    
    // Verificar pr√©stamos NO devueltos
    const prestamosActivosSnapshot = await db.collection('prestamos')
      .where('estado', '!=', 'devuelto')
      .get();
    
    console.log(`üî¥ Pr√©stamos activos (no devueltos): ${prestamosActivosSnapshot.size}`);
    
    if (prestamosActivosSnapshot.size === 0) {
      console.log('‚úÖ CORRECTO: No hay pr√©stamos activos');
      console.log('‚úÖ Por tanto, "En uso" = 0 es el valor correcto');
    }
    
    console.log('3Ô∏è‚É£ Verificando actividades...');
    
    const actividadesSnapshot = await db.collection('actividades').get();
    console.log(`üéØ Actividades en BD: ${actividadesSnapshot.size}`);
    
    if (actividadesSnapshot.size > 0) {
      console.log('üìã Estados de actividades:');
      const estadosActividades = {};
      actividadesSnapshot.forEach(doc => {
        const data = doc.data();
        estadosActividades[data.estado] = (estadosActividades[data.estado] || 0) + 1;
      });
      console.log(estadosActividades);
    }
    
    console.log('4Ô∏è‚É£ Simulando c√°lculo de getCantidadPrestada...');
    
    // Obtener primer material para simular
    const primerMaterial = materialesSnapshot.docs[0];
    if (primerMaterial) {
      const materialData = primerMaterial.data();
      const materialId = primerMaterial.id;
      
      console.log(`üîç Simulando c√°lculo para material: ${materialData.nombre} (${materialId})`);
      
      // Buscar pr√©stamos de este material
      const prestamosDelMaterialSnapshot = await db.collection('prestamos')
        .where('materialId', '==', materialId)
        .get();
      
      console.log(`üì¶ Pr√©stamos totales del material: ${prestamosDelMaterialSnapshot.size}`);
      
      // Filtrar solo no devueltos
      let cantidadPrestada = 0;
      prestamosDelMaterialSnapshot.forEach(doc => {
        const data = doc.data();
        if (data.estado !== 'devuelto') {
          cantidadPrestada += (data.cantidadPrestada || 1);
        }
      });
      
      console.log(`üßÆ Cantidad prestada calculada: ${cantidadPrestada}`);
      console.log(`üìä Cantidad total del material: ${materialData.cantidad || 'sin cantidad'}`);
      console.log(`‚úÖ Resultado esperado "En uso / Total": ${cantidadPrestada}/${materialData.cantidad || '?'}`);
    }
    
    console.log('5Ô∏è‚É£ Recomendaciones...');
    
    if (prestamosSnapshot.size === 0) {
      console.log('üí° ESTADO NORMAL: Despu√©s de reiniciar BD, no hay pr√©stamos');
      console.log('üí° ACCI√ìN: Crear una actividad con materiales para generar pr√©stamos');
      console.log('üí° RESULTADO: La columna "En uso / Total" se actualizar√° autom√°ticamente');
    } else if (prestamosActivosSnapshot.size === 0) {
      console.log('üí° ESTADO: Todos los pr√©stamos est√°n devueltos');
      console.log('üí° CORRECTO: "En uso" = 0 es el valor esperado');
    } else {
      console.log('üí° HAY PR√âSTAMOS ACTIVOS: Verificar c√°lculo en componente');
    }
    
  } catch (error) {
    console.error('‚ùå Error en diagn√≥stico:', error);
  }
}

// Funci√≥n para probar espec√≠ficamente un material
async function probarCalculoMaterial(materialId) {
  try {
    console.log(`üß™ === PRUEBA ESPEC√çFICA PARA MATERIAL: ${materialId} ===`);
    
    const db = window.firebase.firestore();
    
    // Obtener datos del material
    const materialDoc = await db.collection('materiales').doc(materialId).get();
    if (!materialDoc.exists) {
      console.error('‚ùå Material no encontrado');
      return;
    }
    
    const materialData = materialDoc.data();
    console.log('üì¶ Material:', materialData.nombre);
    console.log('üìä Cantidad total:', materialData.cantidad);
    
    // Obtener pr√©stamos del material
    const prestamosSnapshot = await db.collection('prestamos')
      .where('materialId', '==', materialId)
      .get();
    
    console.log(`üîÑ Pr√©stamos totales: ${prestamosSnapshot.size}`);
    
    let cantidadPrestada = 0;
    prestamosSnapshot.forEach(doc => {
      const data = doc.data();
      console.log(`  - Estado: ${data.estado}, Cantidad: ${data.cantidadPrestada || 1}`);
      
      if (data.estado !== 'devuelto') {
        cantidadPrestada += (data.cantidadPrestada || 1);
      }
    });
    
    console.log(`üìä Resultado: ${cantidadPrestada}/${materialData.cantidad}`);
    
  } catch (error) {
    console.error('‚ùå Error probando material:', error);
  }
}

// Ejecutar autom√°ticamente
console.log('üöÄ Ejecutando diagn√≥stico autom√°tico...');
diagnosticarProblemaEnUsoTotal();

// Exponer funciones globalmente para uso manual
window.diagnosticarProblemaEnUsoTotal = diagnosticarProblemaEnUsoTotal;
window.probarCalculoMaterial = probarCalculoMaterial;

console.log('üí° Funciones disponibles:');
console.log('   - diagnosticarProblemaEnUsoTotal()');
console.log('   - probarCalculoMaterial(materialId)');
