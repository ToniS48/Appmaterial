/**
 * Script de prueba para el complemento meteorol√≥gico
 * Ejecutar en la consola del navegador despu√©s de configurar la API key
 */

console.log('üå§Ô∏è INICIANDO PRUEBAS DEL COMPLEMENTO METEOROL√ìGICO');

// Funci√≥n para probar el servicio meteorol√≥gico
async function probarServicioMeteorologico() {
  console.log('\nüì° Probando conexi√≥n con OpenWeatherMap...');
  
  try {
    // Importar el servicio (adaptar seg√∫n el contexto de ejecuci√≥n)
    const { weatherService } = await import('../src/services/weatherService.ts');
    
    // Verificar si est√° habilitado
    if (!weatherService.isEnabled()) {
      console.log('‚ùå El servicio meteorol√≥gico no est√° habilitado');
      console.log('üí° Ve a Configuraci√≥n ‚Üí Clima para habilitarlo');
      return;
    }
    
    console.log('‚úÖ Servicio habilitado');
    
    // Probar obtenci√≥n de pron√≥stico
    console.log('üìä Obteniendo pron√≥stico...');
    const forecast = await weatherService.getWeatherForecast();
    
    if (forecast) {
      console.log('‚úÖ Pron√≥stico obtenido exitosamente:');
      console.log(`üìç Ubicaci√≥n: ${forecast.location.name}`);
      console.log(`üóìÔ∏è D√≠as disponibles: ${forecast.daily.length}`);
      
      // Mostrar primer d√≠a
      const today = forecast.daily[0];
      if (today) {
        console.log(`üå°Ô∏è Hoy: ${today.description}, ${today.temperature.min}¬∞-${today.temperature.max}¬∞C`);
        console.log(`üíß Humedad: ${today.humidity}%, Viento: ${today.windSpeed} km/h`);
      }
    } else {
      console.log('‚ùå No se pudo obtener el pron√≥stico');
    }
    
  } catch (error) {
    console.error('‚ùå Error en la prueba:', error);
  }
}

// Funci√≥n para probar datos para una actividad simulada
async function probarActividadSimulada() {
  console.log('\nüéØ Probando pron√≥stico para actividad simulada...');
  
  try {
    const { weatherService } = await import('../src/services/weatherService.ts');
    
    if (!weatherService.isEnabled()) {
      console.log('‚ùå Servicio no habilitado');
      return;
    }
    
    // Crear actividad simulada para ma√±ana
    const ma√±ana = new Date();
    ma√±ana.setDate(ma√±ana.getDate() + 1);
    
    const weather = await weatherService.getWeatherForActivity(
      ma√±ana,
      undefined,
      'Madrid, Espa√±a'
    );
    
    if (weather.length > 0) {
      console.log('‚úÖ Pron√≥stico para actividad simulada:');
      weather.forEach((day, index) => {
        console.log(`üìÖ D√≠a ${index + 1}: ${day.description}, ${day.temperature.min}¬∞-${day.temperature.max}¬∞C`);
      });
    } else {
      console.log('‚ö†Ô∏è No hay datos meteorol√≥gicos para la actividad');
    }
    
  } catch (error) {
    console.error('‚ùå Error probando actividad:', error);
  }
}

// Funci√≥n para verificar configuraci√≥n
function verificarConfiguracion() {
  console.log('\n‚öôÔ∏è Verificando configuraci√≥n...');
  
  try {
    const { weatherService } = require('../src/services/weatherService.ts');
    const config = weatherService.getConfig();
    
    console.log('üìã Configuraci√≥n actual:');
    console.log(`‚úÖ Habilitado: ${config.enabled ? 'S√≠' : 'No'}`);
    console.log(`üîë API Key: ${config.apiKey ? '***configurada***' : 'No configurada'}`);
    console.log(`üìç Ubicaci√≥n: ${config.defaultLocation.name}`);
    console.log(`üåê Coordenadas: ${config.defaultLocation.lat}, ${config.defaultLocation.lon}`);
    
  } catch (error) {
    console.error('‚ùå Error verificando configuraci√≥n:', error);
  }
}

// Funci√≥n para limpiar cache
function limpiarCache() {
  console.log('\nüßπ Limpiando cache meteorol√≥gico...');
  
  try {
    const { weatherService } = require('../src/services/weatherService.ts');
    weatherService.clearCache();
    console.log('‚úÖ Cache limpiado exitosamente');
  } catch (error) {
    console.error('‚ùå Error limpiando cache:', error);
  }
}

// Funci√≥n principal para ejecutar todas las pruebas
async function ejecutarPruebas() {
  console.log('üöÄ EJECUTANDO PRUEBAS COMPLETAS DEL COMPLEMENTO METEOROL√ìGICO\n');
  
  verificarConfiguracion();
  await probarServicioMeteorologico();
  await probarActividadSimulada();
  limpiarCache();
  
  console.log('\n‚úÖ PRUEBAS COMPLETADAS');
  console.log('\nüí° CONSEJOS:');
  console.log('- Si hay errores, verifica la API key en Configuraci√≥n ‚Üí Clima');
  console.log('- Los datos se actualizan cada 10 minutos autom√°ticamente');
  console.log('- Solo se muestran pron√≥sticos para actividades futuras (7 d√≠as m√°ximo)');
}

// Exponer funciones globalmente para uso en consola
window.pruebasClima = {
  ejecutarPruebas,
  probarServicioMeteorologico,
  probarActividadSimulada,
  verificarConfiguracion,
  limpiarCache
};

console.log('üìã FUNCIONES DISPONIBLES:');
console.log('- pruebasClima.ejecutarPruebas() - Ejecutar todas las pruebas');
console.log('- pruebasClima.probarServicioMeteorologico() - Probar conexi√≥n con API');
console.log('- pruebasClima.verificarConfiguracion() - Ver configuraci√≥n actual');
console.log('- pruebasClima.limpiarCache() - Limpiar cache');

// Ejecutar pruebas autom√°ticamente al cargar
// ejecutarPruebas();
