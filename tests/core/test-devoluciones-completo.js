// TEST DEVOLUCIONES: Verificar que las devoluciones incrementan las cantidades disponibles
// Este script prueba el ciclo completo: pr√©stamo ‚Üí devoluci√≥n ‚Üí verificaci√≥n

console.log('üîÑ === TEST DEVOLUCIONES: INCREMENTO DE CANTIDADES ===');

// Configuraci√≥n del test
const TEST_CONFIG = {
  waitTime: 2000, // 2 segundos entre operaciones
  debug: true
};

// Helper de logging
function logTest(emoji, message, data = null) {
  const timestamp = new Date().toLocaleTimeString();
  console.log(`${timestamp} ${emoji} ${message}`);
  if (data && TEST_CONFIG.debug) {
    console.log(`${timestamp} üìã`, data);
  }
}

// Funci√≥n principal para probar devoluciones
async function probarDevoluciones() {
  logTest('üöÄ', 'Iniciando test de devoluciones...');
  
  try {
    // 1. Verificar servicios
    logTest('üîß', 'Verificando servicios...');
    if (!window.prestamoService || !window.materialService) {
      throw new Error('Servicios no disponibles');
    }
    logTest('‚úÖ', 'Servicios verificados');
    
    // 2. Obtener un material para el test
    logTest('üì¶', 'Obteniendo material para el test...');
    const material = await obtenerMaterialParaTest();
    if (!material) {
      throw new Error('No se encontr√≥ material para el test');
    }
    logTest('‚úÖ', `Material seleccionado: ${material.nombre}`, {
      id: material.id,
      cantidadDisponible: material.cantidadDisponible,
      estado: material.estado
    });
    
    // 3. Crear un pr√©stamo
    logTest('üèóÔ∏è', 'Creando pr√©stamo...');
    const prestamo = await crearPrestamoTest(material);
    logTest('‚úÖ', `Pr√©stamo creado: ${prestamo.id}`);
    
    // Esperar a que se procese
    logTest('‚è≥', 'Esperando procesamiento...');
    await esperar(TEST_CONFIG.waitTime);
    
    // 4. Verificar que la cantidad disminuy√≥
    logTest('üìâ', 'Verificando disminuci√≥n de cantidad...');
    const materialDespuesPrestamo = await window.materialService.obtenerMaterial(material.id);
    const exitoDisminucion = verificarDisminucion(material, materialDespuesPrestamo, prestamo);
    
    if (!exitoDisminucion) {
      logTest('‚ö†Ô∏è', 'La cantidad no disminuy√≥ correctamente, pero continuamos con el test');
    } else {
      logTest('‚úÖ', 'Cantidad disminuy√≥ correctamente');
    }
    
    // 5. Registrar devoluci√≥n
    logTest('üîÑ', 'Registrando devoluci√≥n...');
    await window.prestamoService.registrarDevolucion(prestamo.id, 'Devoluci√≥n de test');
    logTest('‚úÖ', 'Devoluci√≥n registrada');
    
    // Esperar a que se procese
    logTest('‚è≥', 'Esperando procesamiento de devoluci√≥n...');
    await esperar(TEST_CONFIG.waitTime);
    
    // 6. Verificar que la cantidad se increment√≥
    logTest('üìà', 'Verificando incremento de cantidad...');
    const materialDespuesDevolucion = await window.materialService.obtenerMaterial(material.id);
    const exitoIncremento = verificarIncremento(material, materialDespuesDevolucion, prestamo);
    
    if (exitoIncremento) {
      logTest('üéâ', '¬°√âXITO! La devoluci√≥n increment√≥ correctamente la cantidad');
      mostrarResumenExitoso(material, materialDespuesPrestamo, materialDespuesDevolucion, prestamo);
      return true;
    } else {
      logTest('‚ùå', 'FALLO: La devoluci√≥n no increment√≥ la cantidad correctamente');
      mostrarResumenFallido(material, materialDespuesPrestamo, materialDespuesDevolucion, prestamo);
      return false;
    }
    
  } catch (error) {
    logTest('üí•', 'Error durante el test:', error);
    return false;
  }
}

// Obtener material apropiado para el test
async function obtenerMaterialParaTest() {
  try {
    const materiales = await window.materialService.listarMateriales();
    
    // Buscar material con cantidad disponible > 0
    const materialConCantidad = materiales.find(m => 
      m.estado === 'disponible' && 
      m.cantidadDisponible && 
      m.cantidadDisponible > 0
    );
    
    if (materialConCantidad) {
      return materialConCantidad;
    }
    
    // Si no hay con cantidad, buscar material √∫nico disponible
    const materialUnico = materiales.find(m => m.estado === 'disponible');
    return materialUnico;
    
  } catch (error) {
    logTest('‚ùå', 'Error obteniendo material:', error);
    return null;
  }
}

// Crear pr√©stamo de test
async function crearPrestamoTest(material) {
  const cantidadPrestamo = Math.min(1, material.cantidadDisponible || 1);
  
  const prestamoData = {
    materialId: material.id,
    nombreMaterial: material.nombre,
    usuarioId: 'test-user-devolucion',
    nombreUsuario: 'Usuario Test Devoluci√≥n',
    cantidadPrestada: cantidadPrestamo,
    fechaPrestamo: new Date(),
    estado: 'activo',
    observaciones: 'Pr√©stamo de test para verificar devoluciones'
  };
  
  return await window.prestamoService.crearPrestamo(prestamoData);
}

// Verificar que la cantidad disminuy√≥ tras el pr√©stamo
function verificarDisminucion(materialOriginal, materialDespues, prestamo) {
  if (materialOriginal.cantidadDisponible) {
    // Material con cantidad
    const esperado = materialOriginal.cantidadDisponible - prestamo.cantidadPrestada;
    const actual = materialDespues.cantidadDisponible;
    
    logTest('üìä', 'Verificaci√≥n disminuci√≥n (cantidad):', {
      inicial: materialOriginal.cantidadDisponible,
      prestado: prestamo.cantidadPrestada,
      esperado: esperado,
      actual: actual
    });
    
    return actual === esperado;
  } else {
    // Material √∫nico - verificar estado
    logTest('üìä', 'Verificaci√≥n disminuci√≥n (estado):', {
      estadoInicial: materialOriginal.estado,
      estadoEsperado: 'prestado',
      estadoActual: materialDespues.estado
    });
    
    return materialDespues.estado === 'prestado';
  }
}

// Verificar que la cantidad se increment√≥ tras la devoluci√≥n
function verificarIncremento(materialOriginal, materialDespuesDevolucion, prestamo) {
  if (materialOriginal.cantidadDisponible) {
    // Material con cantidad - deber√≠a volver al valor original
    const esperado = materialOriginal.cantidadDisponible;
    const actual = materialDespuesDevolucion.cantidadDisponible;
    
    logTest('üìä', 'Verificaci√≥n incremento (cantidad):', {
      inicial: materialOriginal.cantidadDisponible,
      devuelto: prestamo.cantidadPrestada,
      esperado: esperado,
      actual: actual
    });
    
    return actual === esperado;
  } else {
    // Material √∫nico - deber√≠a volver a disponible
    logTest('üìä', 'Verificaci√≥n incremento (estado):', {
      estadoInicial: materialOriginal.estado,
      estadoEsperado: 'disponible',
      estadoActual: materialDespuesDevolucion.estado
    });
    
    return materialDespuesDevolucion.estado === 'disponible';
  }
}

// Mostrar resumen exitoso
function mostrarResumenExitoso(original, despuesPrestamo, despuesDevolucion, prestamo) {
  console.log('\nüéâ === RESUMEN EXITOSO - DEVOLUCIONES ===');
  console.log('‚úÖ El ciclo pr√©stamo ‚Üí devoluci√≥n funciona correctamente');
  console.log('üìã Detalles:');
  console.log(`   üì¶ Material: ${original.nombre} (${original.id})`);
  console.log(`   üíº Pr√©stamo: ${prestamo.id}`);
  console.log(`   üìä Cantidad prestada: ${prestamo.cantidadPrestada}`);
  
  if (original.cantidadDisponible) {
    console.log(`   üìà Flujo de cantidad:`);
    console.log(`      Inicial: ${original.cantidadDisponible}`);
    console.log(`      Despu√©s pr√©stamo: ${despuesPrestamo.cantidadDisponible}`);
    console.log(`      Despu√©s devoluci√≥n: ${despuesDevolucion.cantidadDisponible}`);
  } else {
    console.log(`   üîÑ Flujo de estado:`);
    console.log(`      Inicial: ${original.estado}`);
    console.log(`      Despu√©s pr√©stamo: ${despuesPrestamo.estado}`);
    console.log(`      Despu√©s devoluci√≥n: ${despuesDevolucion.estado}`);
  }
  
  console.log('üéØ CONCLUSI√ìN: ¬°Las devoluciones actualizan correctamente las cantidades!');
  console.log('================================================\n');
}

// Mostrar resumen fallido
function mostrarResumenFallido(original, despuesPrestamo, despuesDevolucion, prestamo) {
  console.log('\n‚ùå === RESUMEN FALLIDO - DEVOLUCIONES ===');
  console.log('üí• El ciclo de devoluciones tiene problemas');
  console.log('üìã Detalles:');
  console.log(`   üì¶ Material: ${original?.nombre || 'N/A'}`);
  console.log(`   üíº Pr√©stamo: ${prestamo?.id || 'N/A'}`);
  
  if (original?.cantidadDisponible) {
    console.log(`   üìä Cantidades:`);
    console.log(`      Inicial: ${original.cantidadDisponible}`);
    console.log(`      Despu√©s pr√©stamo: ${despuesPrestamo?.cantidadDisponible || 'N/A'}`);
    console.log(`      Despu√©s devoluci√≥n: ${despuesDevolucion?.cantidadDisponible || 'N/A'}`);
  } else {
    console.log(`   üîÑ Estados:`);
    console.log(`      Inicial: ${original?.estado || 'N/A'}`);
    console.log(`      Despu√©s pr√©stamo: ${despuesPrestamo?.estado || 'N/A'}`);
    console.log(`      Despu√©s devoluci√≥n: ${despuesDevolucion?.estado || 'N/A'}`);
  }
  
  console.log('================================================\n');
}

// Funci√≥n helper para esperar
function esperar(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// Funci√≥n adicional para probar devoluci√≥n con incidencia
async function probarDevolucionConIncidencia() {
  logTest('üöÄ', 'Iniciando test de devoluci√≥n con incidencia...');
  
  try {
    // Crear pr√©stamo primero
    const material = await obtenerMaterialParaTest();
    if (!material) {
      throw new Error('No se encontr√≥ material');
    }
    
    const prestamo = await crearPrestamoTest(material);
    await esperar(TEST_CONFIG.waitTime);
    
    // Registrar devoluci√≥n con incidencia
    logTest('‚ö†Ô∏è', 'Registrando devoluci√≥n con incidencia...');
    await window.prestamoService.registrarDevolucionConIncidencia(
      prestamo.id,
      'Material devuelto con da√±os',
      {
        tipo: 'da√±o',
        gravedad: 'media',
        descripcion: 'Material con da√±os menores'
      }
    );
    
    logTest('‚úÖ', 'Devoluci√≥n con incidencia registrada');
    await esperar(TEST_CONFIG.waitTime);
    
    // Verificar estado
    const materialFinal = await window.materialService.obtenerMaterial(material.id);
    logTest('üìä', 'Material despu√©s de devoluci√≥n con incidencia:', {
      estado: materialFinal.estado,
      cantidadDisponible: materialFinal.cantidadDisponible
    });
    
    return true;
    
  } catch (error) {
    logTest('‚ùå', 'Error en test de incidencia:', error);
    return false;
  }
}

// Funciones de conveniencia para ejecutar desde consola
window.probarDevoluciones = probarDevoluciones;
window.probarDevolucionConIncidencia = probarDevolucionConIncidencia;

// Mostrar instrucciones
console.log('üìù === INSTRUCCIONES ===');
console.log('üîÑ Para test completo de devoluciones: probarDevoluciones()');
console.log('‚ö†Ô∏è Para test de devoluci√≥n con incidencia: probarDevolucionConIncidencia()');
console.log('üìç Ejecutar desde una p√°gina donde la app est√© cargada');
console.log('========================');
