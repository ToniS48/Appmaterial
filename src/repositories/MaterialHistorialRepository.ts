/**
 * Repositorio para el historial de materiales por a침os
 * Gestiona el almacenamiento de eventos, resumenes anuales y estad칤sticas
 */
import { BaseRepository, QueryOptions } from './BaseRepository';
import { EventoMaterial, ResumenAnualMaterial } from '../types/materialHistorial';
import { 
  collection, 
  query, 
  where, 
  getDocs, 
  addDoc, 
  updateDoc, 
  deleteDoc, 
  doc 
} from 'firebase/firestore';
import { db } from '../config/firebase';

export interface MaterialHistorialQueryOptions extends QueryOptions {
  a침o?: number;
  materialId?: string;
  tipoEvento?: string;
  gravedad?: string;
}

export class MaterialHistorialRepository extends BaseRepository<EventoMaterial> {
  constructor() {
    super({
      collectionName: 'material_historial',
      enableCache: true,
      cacheTTL: 30 * 60 * 1000 // 30 minutos
    });
  }

  protected async validateEntity(entity: Partial<EventoMaterial>): Promise<void> {
    if (!entity.materialId?.trim()) {
      throw new Error('El ID del material es obligatorio');
    }
    if (!entity.tipoEvento?.trim()) {
      throw new Error('El tipo de evento es obligatorio');
    }
    if (!entity.descripcion?.trim()) {
      throw new Error('La descripci칩n del evento es obligatoria');
    }
    if (!entity.registradoPor?.trim()) {
      throw new Error('El usuario que registra el evento es obligatorio');
    }
  }

  /**
   * Crear m칰ltiples eventos en una sola operaci칩n
   */
  async createMany(eventos: Omit<EventoMaterial, 'id'>[]): Promise<EventoMaterial[]> {
    // Validar todos los eventos
    for (const evento of eventos) {
      await this.validateEntity(evento);
    }

    // Crear en batch
    const nuevosEventos: EventoMaterial[] = [];
    
    for (const evento of eventos) {
      const nuevoEvento = await this.create(evento);
      nuevosEventos.push(nuevoEvento);
    }

    return nuevosEventos;
  }

  /**
   * Buscar eventos de un material espec칤fico en un a침o
   */
  async findEventosByMaterialYear(materialId: string, a침o: number): Promise<EventoMaterial[]> {
    // TEMPORAL: Comentar orderBy para evitar problema de 칤ndices
    // TODO: Crear 칤ndice compuesto en Firestore para materialId + a침o + fecha
    return await this.find({
      where: [
        { field: 'materialId', operator: '==', value: materialId },
        { field: 'a침o', operator: '==', value: a침o }
      ]
      // orderBy: [{ field: 'fecha', direction: 'desc' }]
    });
  }

  /**
   * Buscar eventos por tipo en un rango de fechas
   */
  async findEventosByTipo(tipoEvento: string, a침oInicio?: number, a침oFin?: number): Promise<EventoMaterial[]> {
    const where: any[] = [
      { field: 'tipoEvento', operator: '==', value: tipoEvento }
    ];

    if (a침oInicio) {
      where.push({ field: 'a침o', operator: '>=', value: a침oInicio });
    }
    if (a침oFin) {
      where.push({ field: 'a침o', operator: '<=', value: a침oFin });
    }

    // TEMPORAL: Comentar orderBy para evitar problema de 칤ndices
    // TODO: Crear 칤ndice compuesto en Firestore para tipoEvento + a침o + fecha
    return await this.find({
      where
      // orderBy: [{ field: 'fecha', direction: 'desc' }]
    });
  }

  /**
   * Buscar eventos con costo asociado
   */
  async findEventosConCosto(a침o?: number): Promise<EventoMaterial[]> {
    const where: any[] = [
      { field: 'costoAsociado', operator: '>', value: 0 }
    ];

    if (a침o) {
      where.push({ field: 'a침o', operator: '==', value: a침o });
    }

    // TEMPORAL: Comentar orderBy para evitar problema de 칤ndices
    // TODO: Crear 칤ndice compuesto en Firestore para costoAsociado + a침o + costoAsociado
    return await this.find({
      where
      // orderBy: [{ field: 'costoAsociado', direction: 'desc' }]
    });
  }

  /**
   * Obtener estad칤sticas de eventos por a침o
   */
  async getEstadisticasEventos(a침o: number): Promise<{
    totalEventos: number;
    eventosPorTipo: Record<string, number>;
    costoTotal: number;
    eventosPorMes: number[];
  }> {
    const eventos = await this.find({
      where: [{ field: 'a침o', operator: '==', value: a침o }]
    });

    const estadisticas = {
      totalEventos: eventos.length,
      eventosPorTipo: {} as Record<string, number>,
      costoTotal: 0,
      eventosPorMes: new Array(12).fill(0)
    };

    eventos.forEach(evento => {
      // Contar por tipo
      estadisticas.eventosPorTipo[evento.tipoEvento] = 
        (estadisticas.eventosPorTipo[evento.tipoEvento] || 0) + 1;
      
      // Sumar costos
      estadisticas.costoTotal += evento.costoAsociado || 0;
      
      // Contar por mes
      if (evento.mes >= 1 && evento.mes <= 12) {
        estadisticas.eventosPorMes[evento.mes - 1]++;
      }
    });

    return estadisticas;
  }

  // M칠todos para resumenes anuales
  /**
   * Buscar resumen anual de un material espec칤fico
   */
  async findResumenAnual(materialId: string, a침o: number): Promise<ResumenAnualMaterial | null> {
    try {
      const resumenes = await getDocs(
        query(
          collection(db, 'material_resumenes_anuales'),
          where('materialId', '==', materialId),
          where('a침o', '==', a침o)
        )
      );

      if (resumenes.empty) {
        return null;
      }

      const doc = resumenes.docs[0];
      return { id: doc.id, ...doc.data() } as ResumenAnualMaterial;
    } catch (error) {
      console.error('Error al buscar resumen anual:', error);
      throw error;
    }
  }

  /**
   * Buscar todos los resumenes anuales de un a침o
   */
  async findResumenesAnuales(a침o: number): Promise<ResumenAnualMaterial[]> {
    try {
      const resumenes = await getDocs(
        query(
          collection(db, 'material_resumenes_anuales'),
          where('a침o', '==', a침o)
        )
      );

      return resumenes.docs.map((doc: any) => ({
        id: doc.id,
        ...doc.data()
      })) as ResumenAnualMaterial[];
    } catch (error) {
      console.error('Error al buscar resumenes anuales:', error);
      throw error;
    }
  }

  /**
   * Guardar o actualizar resumen anual
   */
  async saveResumenAnual(resumen: ResumenAnualMaterial): Promise<void> {
    try {
      const existente = await this.findResumenAnual(resumen.materialId, resumen.a침o);
      
      if (existente && existente.id) {
        // Actualizar existente
        await updateDoc(
          doc(db, 'material_resumenes_anuales', existente.id),
          resumen as any
        );
      } else {
        // Crear nuevo
        await addDoc(
          collection(db, 'material_resumenes_anuales'),
          resumen as any
        );
      }
    } catch (error) {
      console.error('Error al guardar resumen anual:', error);
      throw error;
    }
  }

  /**
   * Eliminar resumenes anuales antiguos
   */
  async archivarResumenesAntiguos(a침osAArchiv: number): Promise<number> {
    const a침oLimite = new Date().getFullYear() - a침osAArchiv;
    
    try {
      const resumenes = await getDocs(
        query(
          collection(db, 'material_resumenes_anuales'),
          where('a침o', '<', a침oLimite)
        )
      );

      let archivados = 0;
      for (const docSnapshot of resumenes.docs) {
        await deleteDoc(docSnapshot.ref);
        archivados++;
      }

      console.log(`游닍 ${archivados} resumenes anuales archivados (anteriores a ${a침oLimite})`);
      return archivados;
    } catch (error) {
      console.error('Error al archivar resumenes antiguos:', error);
      throw error;
    }
  }
}

// Instancia singleton del repositorio
export const materialHistorialRepository = new MaterialHistorialRepository();
