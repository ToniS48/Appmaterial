import React, { useState, useCallback, useEffect } from 'react';
import { Calendar, dateFnsLocalizer, Views } from 'react-big-calendar';
import 'react-big-calendar/lib/css/react-big-calendar.css';
import { format, parse, startOfWeek, getDay } from 'date-fns';
import { es } from 'date-fns/locale';
import {
  Box,
  Flex,
  Text,
  Badge,
  useDisclosure,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalCloseButton,
  ModalBody,
  Select,
  HStack,
  Spinner,
  useToast
} from '@chakra-ui/react';
import { Actividad, EstadoActividad, TipoActividad } from '../../types/actividad';
import { listarActividades } from '../../services/actividadService';
import ActividadDetalle from './ActividadDetalle';

// Configurar el calendario en español con date-fns
const locales = {
  'es': es,
};

const localizer = dateFnsLocalizer({
  format,
  parse,
  startOfWeek,
  getDay,
  locales,
});

// Estilos personalizados para eventos según estado
const eventStyleGetter = (event: any) => {
  let backgroundColor;
  switch (event.estado) {
    case 'planificada':
      backgroundColor = '#ECC94B'; // yellow.500
      break;
    case 'en_curso':
      backgroundColor = '#38A169'; // green.500
      break;
    case 'finalizada':
      backgroundColor = '#3182CE'; // blue.500
      break;
    case 'cancelada':
      backgroundColor = '#E53E3E'; // red.500
      break;
    default:
      backgroundColor = '#CBD5E0'; // gray.300
  }

  return {
    style: {
      backgroundColor,
      color: 'white',
      borderRadius: '3px',
      border: 'none'
    }
  };
};

// Opciones de filtro
const estados: EstadoActividad[] = ['planificada', 'en_curso', 'finalizada', 'cancelada'];
const tipos: TipoActividad[] = ['espeleologia', 'barranquismo', 'exterior'];

interface CalendarioActividadesProps {
  mes?: Date;
}

const CalendarioActividades: React.FC<CalendarioActividadesProps> = ({ mes = new Date() }) => {
  const [actividades, setActividades] = useState<Actividad[]>([]);
  const [eventos, setEventos] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [filtroEstado, setFiltroEstado] = useState<string>("");
  const [filtroTipo, setFiltroTipo] = useState<string>("");
  const [selectedActivity, setSelectedActivity] = useState<Actividad | null>(null);
  const toast = useToast();
  
  const { isOpen, onOpen, onClose } = useDisclosure();

  // Cargar actividades
  useEffect(() => {
    const fetchActividades = async () => {
      setLoading(true);
      try {
        // Aplicar filtros si están seleccionados
        const filtros: any = {};
        if (filtroEstado) filtros.estado = filtroEstado;
        if (filtroTipo) filtros.tipo = filtroTipo;
        
        const actividades = await listarActividades(filtros);
        setActividades(actividades);
        
        // Convertir actividades a formato de eventos del calendario
        const eventos = actividades.map(actividad => ({
          id: actividad.id,
          title: actividad.nombre,
          start: actividad.fechaInicio instanceof Date 
            ? actividad.fechaInicio 
            : actividad.fechaInicio.toDate(),
          end: actividad.fechaFin instanceof Date 
            ? actividad.fechaFin 
            : actividad.fechaFin.toDate(),
          estado: actividad.estado,
          allDay: false,
          resource: actividad
        }));
        
        setEventos(eventos);
      } catch (error) {
        console.error("Error al cargar actividades:", error);
        toast({
          title: "Error",
          description: "No se pudieron cargar las actividades",
          status: "error",
          duration: 3000,
          isClosable: true,
        });
      } finally {
        setLoading(false);
      }
    };

    fetchActividades();
  }, [filtroEstado, filtroTipo, toast]);

  // Manejar clic en un evento
  const handleSelectEvent = useCallback((event: any) => {
    setSelectedActivity(event.resource);
    onOpen();
  }, [onOpen]);

  // Componente de evento personalizado
  const EventComponent = ({ event }: any) => (
    <Flex direction="column" p={1} height="100%">
      <Text fontSize="sm" fontWeight="bold" noOfLines={1}>{event.title}</Text>
      {event.resource.lugar && (
        <Text fontSize="xs" noOfLines={1}>{event.resource.lugar}</Text>
      )}
    </Flex>
  );

  return (
    <Box>
      {/* Filtros */}
      <HStack spacing={4} mb={4}>
        <Select 
          placeholder="Todos los estados" 
          value={filtroEstado}
          onChange={(e) => setFiltroEstado(e.target.value)}
          maxW="200px"
        >
          {estados.map(estado => (
            <option key={estado} value={estado}>
              {estado.charAt(0).toUpperCase() + estado.slice(1).replace('_', ' ')}
            </option>
          ))}
        </Select>

        <Select 
          placeholder="Todos los tipos" 
          value={filtroTipo}
          onChange={(e) => setFiltroTipo(e.target.value)}
          maxW="200px"
        >
          {tipos.map(tipo => (
            <option key={tipo} value={tipo}>
              {tipo.charAt(0).toUpperCase() + tipo.slice(1)}
            </option>
          ))}
        </Select>
      </HStack>

      {/* Calendario */}
      <Box 
        height="600px" 
        borderWidth="1px" 
        borderRadius="lg" 
        overflow="hidden"
        position="relative"
      >
        {loading ? (
          <Flex 
            position="absolute"
            top="0"
            left="0"
            right="0"
            bottom="0"
            alignItems="center"
            justifyContent="center"
            bg="whiteAlpha.700"
            zIndex="2"
          >
            <Spinner size="xl" color="brand.500" />
          </Flex>
        ) : null}
        
        <Calendar
          localizer={localizer}
          events={eventos}
          startAccessor="start"
          endAccessor="end"
          style={{ height: '100%' }}
          eventPropGetter={eventStyleGetter}
          onSelectEvent={handleSelectEvent}
          views={[Views.MONTH, Views.WEEK, Views.DAY, Views.AGENDA]}
          defaultView={Views.MONTH}
          defaultDate={mes}
          components={{
            event: EventComponent
          }}
          messages={{
            next: "Siguiente",
            previous: "Anterior",
            today: "Hoy",
            month: "Mes",
            week: "Semana",
            day: "Día",
            agenda: "Agenda",
            date: "Fecha",
            time: "Hora",
            event: "Evento",
            noEventsInRange: "No hay actividades en este periodo",
          }}
        />
      </Box>

      {/* Modal para ver detalle de actividad */}
      <Modal isOpen={isOpen} onClose={onClose} size="lg">
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>Detalle de Actividad</ModalHeader>
          <ModalCloseButton />
          <ModalBody pb={6}>
            {selectedActivity && (
              <ActividadDetalle 
                actividad={selectedActivity}
                onClose={onClose}
              />
            )}
          </ModalBody>
        </ModalContent>
      </Modal>
    </Box>
  );
};

export default CalendarioActividades;