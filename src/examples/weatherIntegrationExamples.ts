// Ejemplo de uso de la integraci√≥n meteorol√≥gica con Open-Meteo y AEMET
// Este archivo muestra c√≥mo usar el servicio de clima en diferentes escenarios

import { weatherService } from '../services/weatherService';
import { Timestamp } from 'firebase/firestore';

/**
 * Ejemplo 1: Configuraci√≥n b√°sica del servicio
 */
async function ejemploConfiguracion() {
  // Configuraci√≥n m√≠nima solo con Open-Meteo
  await weatherService.configure({
    enabled: true,
    defaultLocation: {
      lat: 40.4168,
      lon: -3.7038,
      name: 'Madrid, Espa√±a'
    },
    temperatureUnit: 'celsius',
    windSpeedUnit: 'kmh',
    precipitationUnit: 'mm',
    aemet: {
      enabled: false,
      apiKey: '',
      useForSpain: false
    }
  });

  console.log('‚úÖ Configuraci√≥n b√°sica aplicada');
}

/**
 * Ejemplo 2: Configuraci√≥n completa con AEMET
 */
async function ejemploConfiguracionCompleta() {
  // Configuraci√≥n completa con AEMET para Espa√±a
  await weatherService.configure({
    enabled: true,
    defaultLocation: {
      lat: 40.4168,
      lon: -3.7038,
      name: 'Madrid, Espa√±a'
    },
    temperatureUnit: 'celsius',
    windSpeedUnit: 'kmh',
    precipitationUnit: 'mm',
    aemet: {
      enabled: true,
      apiKey: 'tu-api-key-de-aemet-aqui',
      useForSpain: true
    }
  });

  console.log('‚úÖ Configuraci√≥n completa con AEMET aplicada');
}

/**
 * Ejemplo 3: Obtener pron√≥stico para diferentes ubicaciones
 */
async function ejemploPronosticos() {
  // Ubicaci√≥n en Espa√±a - usar√° AEMET si est√° configurado
  const barcelonaWeather = await weatherService.getWeatherForecast('Barcelona, Espa√±a', 5);
  console.log('üá™üá∏ Pron√≥stico Barcelona (AEMET):', barcelonaWeather);

  // Ubicaci√≥n fuera de Espa√±a - usar√° Open-Meteo
  const parisWeather = await weatherService.getWeatherForecast('Par√≠s, Francia', 5);
  console.log('üá´üá∑ Pron√≥stico Par√≠s (Open-Meteo):', parisWeather);

  // Sin especificar ubicaci√≥n - usa ubicaci√≥n por defecto
  const defaultWeather = await weatherService.getWeatherForecast(undefined, 3);
  console.log('üìç Pron√≥stico ubicaci√≥n por defecto:', defaultWeather);
}

/**
 * Ejemplo 4: Obtener clima para actividades espec√≠ficas
 */
async function ejemploActividadEspana() {
  // Actividad en Espa√±a (2 d√≠as) - usar√° AEMET
  const fechaInicio = new Date('2025-06-25');
  const fechaFin = new Date('2025-06-26');
  
  const climaActividad = await weatherService.getWeatherForActivity(
    fechaInicio,
    fechaFin,
    'Montserrat, Barcelona'
  );

  console.log('üèîÔ∏è Clima para actividad en Montserrat:', climaActividad);
  // Resultado esperado:
  // [
  //   {
  //     date: '2025-06-25',
  //     temperature: { min: 15, max: 22 },
  //     description: 'Parcialmente nublado',
  //     icon: '03d',
  //     humidity: 65,
  //     windSpeed: 12,
  //     precipitation: 0,
  //     condition: 'clouds'
  //   },
  //   {
  //     date: '2025-06-26',
  //     temperature: { min: 16, max: 25 },
  //     description: 'Despejado',
  //     icon: '01d',
  //     humidity: 45,
  //     windSpeed: 8,
  //     precipitation: 0,
  //     condition: 'clear'
  //   }
  // ]
}

/**
 * Ejemplo 5: Actividad fuera de Espa√±a
 */
async function ejemploActividadInternacional() {
  // Actividad en Francia - usar√° Open-Meteo
  const fechaActividad = Timestamp.fromDate(new Date('2025-07-15'));
  
  const climaFrancia = await weatherService.getWeatherForActivity(
    fechaActividad,
    undefined, // Sin fecha fin = actividad de un d√≠a
    'Chamonix, Francia'
  );

  console.log('üóª Clima para actividad en Chamonix:', climaFrancia);
}

/**
 * Ejemplo 6: Manejo de errores y fallback
 */
async function ejemploFallback() {
  try {
    // Si AEMET falla, autom√°ticamente usa Open-Meteo
    const clima = await weatherService.getWeatherForecast('Sevilla, Espa√±a', 3);
    
    if (clima) {
      console.log('‚úÖ Datos obtenidos (fuente autom√°tica):', clima.daily.length, 'd√≠as');
    } else {
      console.log('‚ùå No se pudieron obtener datos meteorol√≥gicos');
    }
  } catch (error) {
    console.error('‚ùå Error:', error);
  }
}

/**
 * Ejemplo 7: Verificar configuraci√≥n y estado
 */
async function ejemploEstado() {
  // Verificar si el servicio est√° habilitado
  const habilitado = weatherService.isEnabled();
  console.log('üîß Servicio habilitado:', habilitado);

  // Obtener configuraci√≥n actual
  const config = await weatherService.getConfig();
  console.log('‚öôÔ∏è Configuraci√≥n actual:', {
    habilitado: config.enabled,
    ubicacionPorDefecto: config.defaultLocation.name,
    aemetHabilitado: config.aemet.enabled,
    aemetParaEspana: config.aemet.useForSpain
  });
}

/**
 * Funci√≥n principal para ejecutar todos los ejemplos
 */
export async function ejecutarEjemplos() {
  console.log('üå§Ô∏è Iniciando ejemplos de integraci√≥n meteorol√≥gica\n');

  try {
    // Configurar servicio
    await ejemploConfiguracionCompleta();
    
    // Obtener pron√≥sticos
    await ejemploPronosticos();
    
    // Actividades espec√≠ficas
    await ejemploActividadEspana();
    await ejemploActividadInternacional();
    
    // Estado del servicio
    await ejemploEstado();
    
    // Manejo de errores
    await ejemploFallback();

    console.log('\n‚úÖ Todos los ejemplos ejecutados correctamente');
  } catch (error) {
    console.error('\n‚ùå Error en ejemplos:', error);
  }
}

export default {
  ejemploConfiguracion,
  ejemploConfiguracionCompleta,
  ejemploPronosticos,
  ejemploActividadEspana,
  ejemploActividadInternacional,
  ejemploFallback,
  ejemploEstado,
  ejecutarEjemplos
};
