/**
 * VERIFICADOR Y GENERADOR AUTOM√ÅTICO PARA CONSOLA DEL NAVEGADOR
 * 
 * INSTRUCCIONES:
 * 1. Abrir http://localhost:3000 en el navegador
 * 2. Abrir DevTools (F12)
 * 3. Ir a la pesta√±a Console
 * 4. Copiar y pegar TODO este c√≥digo y presionar Enter
 * 5. El script verificar√° los datos y generar√° autom√°ticamente si no existen
 */

(async function verificadorAutomatico() {
  console.log('üöÄ INICIANDO VERIFICACI√ìN Y GENERACI√ìN AUTOM√ÅTICA...');
  console.log('‚è∞ Tiempo:', new Date().toLocaleString());

  try {
    // Verificar que Firebase est√° disponible
    if (!window.firebase) {
      console.error('‚ùå Firebase no est√° disponible. Aseg√∫rate de estar en la aplicaci√≥n.');
      return;
    }

    const db = window.firebase.firestore();
    console.log('‚úÖ Firebase conectado correctamente');

    // 1. VERIFICAR DATOS EXISTENTES
    console.log('\nüìä VERIFICANDO DATOS EXISTENTES...');
    
    const snapshot = await db.collection('material_historial').limit(10).get();
    const totalDocumentos = snapshot.size;
    
    console.log(`üìà Documentos encontrados: ${totalDocumentos}`);
    
    if (totalDocumentos === 0) {
      console.log('‚ö†Ô∏è No hay datos. Generando datos de prueba...');
      await generarDatosPrueba(db);
    } else {
      console.log('‚úÖ Datos existentes encontrados');
      mostrarMuestraDatos(snapshot);
    }

    // 2. VERIFICAR ESTADO FINAL
    await verificarEstadoFinal(db);

  } catch (error) {
    console.error('‚ùå Error en verificaci√≥n:', error);
  }

  // Funci√≥n para generar datos de prueba
  async function generarDatosPrueba(db) {
    console.log('üì¶ Generando 30 eventos de prueba...');
    
    const materialesEjemplo = ['MAT001', 'MAT002', 'MAT003', 'MAT004', 'MAT005'];
    const tiposEvento = ['mantenimiento', 'reparacion', 'inspeccion', 'reemplazo', 'calibracion'];
    const gravedades = ['baja', 'media', 'alta'];
    
    const eventos = [];
    
    // Generar eventos para los √∫ltimos 2 a√±os
    for (let i = 0; i < 30; i++) {
      const fechaAleatoria = new Date();
      fechaAleatoria.setDate(fechaAleatoria.getDate() - Math.floor(Math.random() * 730));
      
      const evento = {
        materialId: materialesEjemplo[Math.floor(Math.random() * materialesEjemplo.length)],
        nombreMaterial: `Material ${materialesEjemplo[Math.floor(Math.random() * materialesEjemplo.length)]}`,
        tipoEvento: tiposEvento[Math.floor(Math.random() * tiposEvento.length)],
        descripcion: `Evento autom√°tico generado para pruebas - ${i + 1}`,
        fecha: window.firebase.firestore.Timestamp.fromDate(fechaAleatoria),
        a√±o: fechaAleatoria.getFullYear(),
        mes: fechaAleatoria.getMonth() + 1,
        registradoPor: 'Sistema Autom√°tico',
        gravedad: gravedades[Math.floor(Math.random() * gravedades.length)],
        costoAsociado: Math.random() > 0.5 ? Math.floor(Math.random() * 1000) + 100 : 0,
        completado: Math.random() > 0.2,
        fechaRegistro: window.firebase.firestore.Timestamp.now()
      };
      
      eventos.push(evento);
    }
    
    // Guardar en lotes
    const batch = db.batch();
    eventos.forEach(evento => {
      const ref = db.collection('material_historial').doc();
      batch.set(ref, evento);
    });
    
    await batch.commit();
    console.log('‚úÖ Datos generados correctamente');
  }

  // Funci√≥n para mostrar muestra de datos
  function mostrarMuestraDatos(snapshot) {
    console.log('\nüìã MUESTRA DE DATOS:');
    snapshot.docs.slice(0, 3).forEach((doc, index) => {
      const data = doc.data();
      console.log(`${index + 1}. Material: ${data.materialId} | Evento: ${data.tipoEvento} | Fecha: ${data.fecha?.toDate?.()?.toLocaleDateString() || 'N/A'}`);
    });
  }

  // Funci√≥n para verificar estado final
  async function verificarEstadoFinal(db) {
    console.log('\nüîç VERIFICACI√ìN FINAL...');
    
    const finalSnapshot = await db.collection('material_historial').get();
    const total = finalSnapshot.size;
    
    console.log(`üìä Total de eventos: ${total}`);
    
    if (total > 0) {
      // An√°lisis por tipo de evento
      const eventTypes = {};
      const materials = new Set();
      let totalCost = 0;
      
      finalSnapshot.docs.forEach(doc => {
        const data = doc.data();
        eventTypes[data.tipoEvento] = (eventTypes[data.tipoEvento] || 0) + 1;
        materials.add(data.materialId);
        totalCost += data.costoAsociado || 0;
      });
      
      console.log('\nüìà ESTAD√çSTICAS:');
      console.log(`üè∑Ô∏è Materiales √∫nicos: ${materials.size}`);
      console.log(`üí∞ Costo total: $${totalCost.toLocaleString()}`);
      console.log('üìä Eventos por tipo:', eventTypes);
      
      console.log('\n‚úÖ VERIFICACI√ìN COMPLETA');
      console.log('üéØ El dashboard deber√≠a mostrar estos datos ahora');
      console.log('üîÑ Si no ves los datos, recarga la p√°gina (Ctrl+F5)');
    } else {
      console.log('‚ùå No se encontraron datos despu√©s de la generaci√≥n');
    }
  }
})();

console.log('üìù Script cargado. La verificaci√≥n se ejecutar√° autom√°ticamente...');
