#!/usr/bin/env node

/**
 * VERIFICACI√ìN R√ÅPIDA: Sistema de Encriptaci√≥n Seguro
 * 
 * Script para verificar que el nuevo sistema est√° funcionando correctamente
 */

console.log('üîç VERIFICACI√ìN R√ÅPIDA: Sistema de Encriptaci√≥n Seguro');
console.log('====================================================\n');

async function verificacionRapida() {
  try {
    console.log('1Ô∏è‚É£ VERIFICANDO ENTORNO...');
    
    // Verificar Firebase
    if (!window.firebase) {
      console.error('‚ùå Firebase no disponible');
      console.log('üí° Aseg√∫rate de que la aplicaci√≥n est√© cargada completamente');
      return;
    }
    console.log('‚úÖ Firebase disponible');

    // Verificar autenticaci√≥n
    const auth = window.firebase.auth.getAuth();
    const user = auth.currentUser;
    
    if (!user) {
      console.warn('‚ö†Ô∏è Usuario no autenticado');
      console.log('üí° Inicia sesi√≥n para probar las funciones de encriptaci√≥n');
      console.log('üìã Funciones disponibles sin autenticaci√≥n:');
      console.log('   - Verificaci√≥n de componentes');
      console.log('   - Verificaci√≥n de dependencias');
    } else {
      console.log('‚úÖ Usuario autenticado:', user.email);
    }

    console.log('\n2Ô∏è‚É£ VERIFICANDO SERVICIOS...');
    
    // Verificar SecureEncryption
    if (typeof window.SecureEncryption !== 'undefined') {
      console.log('‚úÖ SecureEncryption disponible globalmente');
      
      // Verificar m√©todos principales
      const requiredMethods = [
        'encryptApiKey',
        'decryptApiKey',
        'validateEncryptedApiKey',
        'reencryptApiKey',
        'getEncryptionInfo',
        'needsUpdate'
      ];
      
      const missingMethods = requiredMethods.filter(method => 
        typeof window.SecureEncryption[method] !== 'function'
      );
      
      if (missingMethods.length > 0) {
        console.error('‚ùå M√©todos faltantes en SecureEncryption:', missingMethods);
      } else {
        console.log('‚úÖ Todos los m√©todos de SecureEncryption disponibles');
      }
    } else {
      console.error('‚ùå SecureEncryption no disponible');
      console.log('üí° Verifica que est√© importado en App.tsx');
    }

    // Verificar CryptoJS
    if (typeof CryptoJS !== 'undefined') {
      console.log('‚úÖ CryptoJS disponible');
    } else {
      console.error('‚ùå CryptoJS no disponible');
    }

    console.log('\n3Ô∏è‚É£ VERIFICANDO FIRESTORE...');
    
    try {
      const { getFirestore, doc, getDoc } = window.firebase.firestore;
      const db = getFirestore();
      
      // Intentar acceder al documento de configuraci√≥n
      const apisDocRef = doc(db, 'configuracion', 'apis');
      const apisDocSnap = await getDoc(apisDocRef);
      
      if (apisDocSnap.exists()) {
        console.log('‚úÖ Acceso a configuraci√≥n de APIs');
        const data = apisDocSnap.data();
        console.log('üìã Configuraci√≥n actual:');
        console.log('   - weatherApiUrl:', data.weatherApiUrl ? '‚úÖ' : '‚ùå');
        console.log('   - aemetApiKey:', data.aemetApiKey ? '‚úÖ' : '‚ùå');
      } else {
        console.log('‚ÑπÔ∏è Documento de configuraci√≥n no existe (se crear√° al guardar)');
      }
    } catch (firestoreError) {
      console.error('‚ùå Error accediendo a Firestore:', firestoreError);
    }

    console.log('\n4Ô∏è‚É£ VERIFICANDO CONFIGURACI√ìN...');
    
    // Verificar variables de entorno p√∫blicas
    const publicEnvVars = {
      'REACT_APP_ENCRYPTION_VERSION': process.env.REACT_APP_ENCRYPTION_VERSION,
      'REACT_APP_CRYPTO_ALGORITHM': process.env.REACT_APP_CRYPTO_ALGORITHM
    };
    
    console.log('üìã Variables de entorno p√∫blicas:');
    Object.entries(publicEnvVars).forEach(([key, value]) => {
      console.log(`   - ${key}: ${value ? '‚úÖ' : '‚ùå'}`);
    });

    console.log('\n5Ô∏è‚É£ PRUEBA DE FUNCIONALIDAD...');
    
    if (user && typeof window.SecureEncryption !== 'undefined') {
      console.log('üß™ Ejecutando prueba de encriptaci√≥n...');
      
      try {
        const testData = 'test-api-key-' + Date.now();
        
        // Encriptar
        const encrypted = await window.SecureEncryption.encryptApiKey(
          testData, 
          user, 
          'test'
        );
        console.log('‚úÖ Encriptaci√≥n exitosa');
        
        // Desencriptar
        const decrypted = await window.SecureEncryption.decryptApiKey(
          encrypted, 
          user, 
          'test'
        );
        
        if (decrypted === testData) {
          console.log('‚úÖ Desencriptaci√≥n exitosa - datos coinciden');
        } else {
          console.error('‚ùå Error: datos no coinciden');
          console.log('   Original:', testData);
          console.log('   Desencriptado:', decrypted);
        }
        
        // Verificar informaci√≥n de encriptaci√≥n
        const info = window.SecureEncryption.getEncryptionInfo(encrypted);
        if (info) {
          console.log('‚úÖ Informaci√≥n de encriptaci√≥n disponible');
          console.log('   - Versi√≥n:', info.version);
          console.log('   - Timestamp:', new Date(info.timestamp || 0).toLocaleString());
          console.log('   - UserHash:', info.userHash?.substring(0, 8) + '...');
        }
        
      } catch (testError) {
        console.error('‚ùå Error en prueba de funcionalidad:', testError);
      }
    } else {
      console.log('‚è≠Ô∏è Saltando prueba de funcionalidad (requiere autenticaci√≥n)');
    }

    console.log('\n‚úÖ VERIFICACI√ìN COMPLETADA');
    console.log('========================');
    
    if (user && typeof window.SecureEncryption !== 'undefined') {
      console.log('üéâ Sistema completamente funcional');
      console.log('üìã Puedes proceder a:');
      console.log('   1. Ir a Configuraci√≥n ‚Üí APIs');
      console.log('   2. Configurar tu API key de AEMET');
      console.log('   3. Usar "Guardar Key Encriptada"');
      console.log('   4. Verificar con "Validar Key"');
    } else {
      console.log('‚ö†Ô∏è Sistema parcialmente verificado');
      console.log('üìã Para prueba completa:');
      console.log('   1. Inicia sesi√≥n como administrador');
      console.log('   2. Ejecuta: verificacionRapida()');
    }

  } catch (error) {
    console.error('‚ùå Error en verificaci√≥n:', error);
    console.log('\nüìã PASOS PARA SOLUCIONAR:');
    console.log('1. Recarga la p√°gina');
    console.log('2. Verifica que est√© cargada completamente');
    console.log('3. Ejecuta: verificacionRapida()');
  }
}

// Hacer disponible globalmente
if (typeof window !== 'undefined') {
  window.verificacionRapida = verificacionRapida;
  
  // Ejecutar autom√°ticamente si la p√°gina est√° cargada
  if (document.readyState === 'complete') {
    verificacionRapida();
  } else {
    window.addEventListener('load', verificacionRapida);
  }
}

console.log('\nüí° Para ejecutar manualmente:');
console.log('   verificacionRapida()');
