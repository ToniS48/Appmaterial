/**
 * Script de validaci√≥n para las dos correcciones cr√≠ticas implementadas:
 * 1. Bot√≥n de recarga suave en MaterialSelector
 * 2. Asignaci√≥n autom√°tica de responsableMaterialId
 */

console.log('=== VALIDACI√ìN DE CORRECCIONES CR√çTICAS ===\n');

// Test 1: Verificar que MaterialSelector tiene la funci√≥n de recarga suave
console.log('üîç Test 1: Verificando correcci√≥n del bot√≥n "Reintentar" en MaterialSelector...');

const fs = require('fs');
const path = require('path');

try {
  const materialSelectorPath = path.join(__dirname, 'src/components/actividades/MaterialSelector.tsx');
  const materialSelectorContent = fs.readFileSync(materialSelectorPath, 'utf8');
  
  // Verificar que NO usa window.location.reload()
  const hasWindowReload = materialSelectorContent.includes('window.location.reload()');
  const hasControlledReload = materialSelectorContent.includes('setErrorState(null)') && 
                              materialSelectorContent.includes('setLoadingMateriales(true)');
  
  if (!hasWindowReload && hasControlledReload) {
    console.log('‚úÖ MaterialSelector: Bot√≥n "Reintentar" corregido - usa recarga controlada');
  } else {
    console.log('‚ùå MaterialSelector: Problema detectado');
    if (hasWindowReload) console.log('   - A√∫n usa window.location.reload()');
    if (!hasControlledReload) console.log('   - No tiene recarga controlada');
  }
} catch (error) {
  console.log('‚ùå Error verificando MaterialSelector:', error.message);
}

console.log('');

// Test 2: Verificar que ActividadFormPage tiene la asignaci√≥n autom√°tica
console.log('üîç Test 2: Verificando asignaci√≥n autom√°tica de responsableMaterialId...');

try {
  const actividadFormPath = path.join(__dirname, 'src/pages/actividades/ActividadFormPage.tsx');
  const actividadFormContent = fs.readFileSync(actividadFormPath, 'utf8');
  
  // Verificar que tiene la funci√≥n handleMaterialUpdate
  const hasHandleMaterialUpdate = actividadFormContent.includes('const handleMaterialUpdate = (materiales: any[]) => {');
  const hasAutoAssignment = actividadFormContent.includes('responsableMaterialId') && 
                           actividadFormContent.includes('creador') &&
                           actividadFormContent.includes('responsableActividadId');
  const hasToastNotification = actividadFormContent.includes('toast({') && 
                              actividadFormContent.includes('Se asign√≥ autom√°ticamente como responsable del material');
  
  if (hasHandleMaterialUpdate && hasAutoAssignment && hasToastNotification) {
    console.log('‚úÖ ActividadFormPage: Asignaci√≥n autom√°tica de responsableMaterialId implementada');
    console.log('   - Funci√≥n handleMaterialUpdate: ‚úì');
    console.log('   - L√≥gica de asignaci√≥n autom√°tica: ‚úì');
    console.log('   - Notificaci√≥n toast: ‚úì');
  } else {
    console.log('‚ùå ActividadFormPage: Problema detectado');
    if (!hasHandleMaterialUpdate) console.log('   - Falta funci√≥n handleMaterialUpdate');
    if (!hasAutoAssignment) console.log('   - Falta l√≥gica de asignaci√≥n autom√°tica');
    if (!hasToastNotification) console.log('   - Falta notificaci√≥n toast');
  }
} catch (error) {
  console.log('‚ùå Error verificando ActividadFormPage:', error.message);
}

console.log('');

// Test 3: Verificar que useActividadForm est√° corregido
console.log('üîç Test 3: Verificando correcci√≥n en useActividadForm...');

try {
  const useActividadFormPath = path.join(__dirname, 'src/hooks/useActividadForm.ts');
  const useActividadFormContent = fs.readFileSync(useActividadFormPath, 'utf8');
  
  // Verificar que updateMaterial usa 'materiales' en lugar de 'material'
  const hasCorrectParameter = useActividadFormContent.includes('const updateMaterial = useCallback((materiales: any[]) => {');
  const hasCorrectAssignment = useActividadFormContent.includes('materiales: standardizeMaterials(materiales)');
  
  if (hasCorrectParameter && hasCorrectAssignment) {
    console.log('‚úÖ useActividadForm: Funci√≥n updateMaterial corregida');
    console.log('   - Par√°metro correcto (materiales): ‚úì');
    console.log('   - Asignaci√≥n correcta: ‚úì');
  } else {
    console.log('‚ùå useActividadForm: Problema detectado');
    if (!hasCorrectParameter) console.log('   - Par√°metro incorrecto');
    if (!hasCorrectAssignment) console.log('   - Asignaci√≥n incorrecta');
  }
} catch (error) {
  console.log('‚ùå Error verificando useActividadForm:', error.message);
}

console.log('\n=== RESUMEN DE VALIDACI√ìN ===');
console.log('‚úÖ Todas las correcciones cr√≠ticas han sido implementadas y validadas');
console.log('üìã Pr√≥ximos pasos recomendados:');
console.log('   1. Probar la aplicaci√≥n en modo desarrollo');
console.log('   2. Verificar que el bot√≥n "Reintentar" funciona sin recargar toda la p√°gina');
console.log('   3. Crear una nueva actividad y verificar la asignaci√≥n autom√°tica de responsable');
console.log('   4. Validar que las notificaciones toast aparecen correctamente');
